AllCops:
  TargetRubyVersion: 2.6.4
  TargetRailsVersion: 6.0.0
  # RuboCop has a bunch of cops enabled by default. This setting tells RuboCop
  # to ignore them, so only the ones explicitly set in this file are enabled.
  DisabledByDefault: true
  Exclude:
    - '**/bin/*'
    - '**/db/**/*'
    - '**/templates/**/*'
    - '**/vendor/**/*'

# Prefer &&/|| over and/or.
Style/AndOr:
  Enabled: true

# Do not use braces for hash literals when they are the last argument of a
# method call.
Style/BracesAroundHashParameters:
  Enabled: true

# Align comments with method definitions.
Layout/CommentIndentation:
  Enabled: true

# Use Ruby >= 1.9 syntax for hashes. Prefer { a: :b } over { :a => :b }.
Style/HashSyntax:
  Enabled: true

# Method definitions after `private` or `protected` isolated calls need one
# extra level of indentation.
Layout/IndentationConsistency:
  Enabled: true
  EnforcedStyle: indented_internal_methods

# Two spaces, no tabs (for indentation).
Layout/IndentationWidth:
  Enabled: true

Layout/SpaceAfterColon:
  Enabled: true

Layout/SpaceAfterComma:
  Enabled: true

Layout/SpaceAroundEqualsInParameterDefault:
  Enabled: true

Layout/SpaceAroundKeyword:
  Enabled: true

Layout/SpaceAroundOperators:
  Enabled: true
  Exclude:
  - '**/db/schema.rb'

Layout/SpaceBeforeFirstArg:
    Enabled: true

# Defining a method with parameters needs parentheses.
Style/MethodDefParentheses:
  Enabled: true

# Use `foo {}` not `foo{}`.
Layout/SpaceBeforeBlockBraces:
  Enabled: true

# Use `foo { bar }` not `foo {bar}`.
Layout/SpaceInsideBlockBraces:
  Enabled: true

# Use `{ a: 1 }` not `{a:1}`.
Layout/SpaceInsideHashLiteralBraces:
  Enabled: true
  Exclude:
    - '**/db/schema.rb'

Layout/SpaceInsideParens:
  Enabled: true

# Check quotes usage according to lint rule below.
#Style/StringLiterals:
#  Enabled: true
#  EnforcedStyle: double_quotes

# Detect hard tabs, no hard tabs.
Layout/Tab:
  Enabled: true

# Blank lines should not have any spaces.
Layout/TrailingBlankLines:
  Enabled: true

# No trailing whitespace.
Layout/TrailingWhitespace:
  Enabled: true

# Use quotes for string literals when they are enough.
Style/UnneededPercentQ:
  Enabled: true

# Indentation of `when`.
Layout/CaseIndentation:
  EnforcedStyle: case
  SupportedStyles:
    - case
    - end
  IndentOneStep: true
  # By default, the indentation width from `Style/IndentationWidth` is used.
  # But it can be overridden by setting this parameter.
  # This only matters if `IndentOneStep` is `true`
  IndentationWidth: ~

# This cop checks for conditions that are not on the same line as if/while/until.
Layout/ConditionPosition:
  Enabled: true

# Align `end` with the matching keyword or starting expression except for
# assignments, where it should be aligned with the LHS.
Layout/EndAlignment:
  Enabled: true
  EnforcedStyleAlignWith: variable

## This cop checks for ambiguous operators in the first argument of a method invocation without parentheses.
#Lint/AmbiguousOperator:
#  Enabled: true

# This cop checks for ambiguous regexp literals in the first argument of a method invocation without parentheses.
Lint/AmbiguousRegexpLiteral:
  Enabled: true

# This cop checks for assignments in the conditions of if/while/until.
#Lint/AssignmentInCondition:
#  Enabled: true

# This cop checks for circular argument references in optional keyword arguments and optional ordinal arguments.
Lint/CircularArgumentReference:
  Enabled: true

# This cop checks for uses of the deprecated class method usages.
Lint/DeprecatedClassMethods:
  Enabled: true

# This cop checks that there are no repeated conditions used in case 'when' expressions.
Lint/DuplicateCaseCondition:
  Enabled: true

# This cop checks for duplicated instance (or singleton) method definitions.
Lint/DuplicateMethods:
  Enabled: true

# This cop checks for odd else block layout - like having an expression on the same line as the else keyword, which is usually a mistake.
Lint/ElseLayout:
  Enabled: true

# This cop checks for the presence of empty expressions.
Lint/EmptyExpression:
  Enabled: true

# This cop checks for empty interpolation.
Lint/EmptyInterpolation:
  Enabled: true

# This cop checks for the presence of when branches without a body.
Lint/EmptyWhen:
  Enabled: true

# This cop checks for END blocks in method definitions.
Lint/EndInMethod:
  Enabled: true

# This lint sees if there is a mismatch between the number of expected fields for format/sprintf/#% and what is actually passed as arguments.
Lint/FormatParameterMismatch:
  Enabled: true

## This cop checks for rescue blocks with no body.
#Lint/HandleExceptions:
#  Enabled: true

# This cop checks for interpolated literals.
Lint/LiteralInInterpolation:
  Enabled: true

# This cop checks for uses of begin...end while/until something.
Lint/Loop:
  Enabled: true

# In math and Python, we can use x < y < z style comparison to compare multiple value. However, we can't use the comparison in Ruby. However, the comparison is not syntax error. This cop checks the bad usage of comparison operators.
Lint/MultipleCompare:
  Enabled: true

# This cop checks for nested method definitions.
Lint/NestedMethodDefinition:
  Enabled: true

## This cop checks for quotes and commas in %w, e.g. %w('foo', "bar")
#Lint/PercentStringArray:
#  Enabled: true

# This cop checks for colons and commas in %i, e.g. %i(:foo, :bar)
Lint/PercentSymbolArray:
  Enabled: true

# This cop checks for unreachable code. The check are based on the presence of flow of control statement in non-final position in begin(implicit) blocks.
Lint/UnreachableCode:
  Enabled: true

# This cop checks for redundant access modifiers, including those with no code, those which are repeated, and leading public modifiers in a class or module body. Conditionally-defined methods are considered as always being defined, and thus access modifiers guarding such methods are not redundant.
Lint/UselessAccessModifier:
  Enabled: true

# This cop checks for comparison of something with itself.
Lint/UselessComparison:
  Enabled: true

# Use my_method(my_arg) not my_method( my_arg ) or my_method my_arg.
Lint/RequireParentheses:
  Enabled: true

Rails:
  Enabled: true

# Checks that ActiveRecord aliases are not used. The direct method names are more clear and easier to read.
Rails/ActiveRecordAliases:
  Enabled: true

# This cop checks that ActiveSupport aliases to core ruby methods are not used.
Rails/ActiveSupportAliases:
  Enabled: true

# This cop checks for code that can be written with simpler conditionals using Object#blank? defined by Active Support.
Rails/Blank:
  Enabled: true

#  This cop looks for delegations that could have been created automatically with the delegate method.
Rails/Delegate:
  Enabled: true

#  This cop looks for delegations that pass :allow_blank as an option instead of :allow_nil. :allow_blank is not a valid option to pass to ActiveSupport#delegate.
Rails/DelegateAllowBlank:
  Enabled: true

#  This cop checks dynamic find_by_* methods. Use find_by instead of dynamic method. See. https://github.com/rubocop-hq/rails-style-guide#find_by
Rails/DynamicFindBy:
  Enabled: true

#  This cop looks for duplicate values in enum declarations.
Rails/EnumUniqueness:
  Enabled: true

#  This cop checks that Rails.env is compared using .production?-like methods instead of equality against a string or symbol.
Rails/EnvironmentComparison:
  Enabled: true

#  This cop is used to identify usages of file path joining process to use Rails.root.join clause. It is used to add uniformity when joining paths.
Rails/FilePath:
  Enabled: true

#  This cop is used to identify usages of where.first and change them to use find_by instead.
Rails/FindBy:
  Enabled: true

#  This cop is used to identify usages of all.each and change them to use all.find_each instead.
Rails/FindEach:
  Enabled: true

#  This cop looks for has_many or has_one associations that don't specify a :dependent option. It doesn't register an offense if :through option was specified.
Rails/HasManyOrHasOneDependent:
  Enabled: true

#  This cop is used to identify usages of http methods like get, post, put, patch without the usage of keyword arguments in your tests and change them to use keyword args.
Rails/HttpPositionalArguments:
  Enabled: true

#  Enforces use of symbolic or numeric value to define HTTP status.
Rails/HttpStatus:
  Enabled: true

#  This cop checks that methods specified in the filter's only or except options are defined within the same class or module.
Rails/LexicallyScopedActionFilter:
  Enabled: true

#  This cop checks for the use of output calls like puts and print
Rails/Output:
  Enabled: true
  Include:
    - app/**/*.rb
    - lib/**/*.rb

#  This cop checks for code that can be written with simpler conditionals using Object#present? defined by Active Support.
Rails/Present:
  Enabled: true

#  This cop converts usages of try! to &.. It can also be configured to convert try. It will convert code to use safe navigation if the target Ruby version is set to 2.3+
Rails/SafeNavigation:
  Enabled: true
  ConvertTry: true

#  This cop checks that environments called with Rails.env predicates exist.
Rails/UnknownEnv:
  Enabled: true
  Environments:
    - production
    - development
    - test
    - staging
    - testing


#  This cop checks for the use of old-style attribute validation macros.
Rails/Validation:
  Enabled: true

#  This cop checks code that can be written more easily using Object#presence defined by Active Support.
Rails/Presence:
  Enabled: true


